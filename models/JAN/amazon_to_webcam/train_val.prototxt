name: "amazon_to_webcam"
layer {
  name: "source_data"
  type: "ImageData"
  top: "source_data"
  top: "source_label"
  image_data_param {
    source: "./data/office/amazon_list.txt"
    batch_size: 64
    new_height: 256
    new_width: 256
    shuffle: true
  }
  transform_param {
    crop_size: 227
    mirror: true
    mean_file: "./data/ilsvrc12/imagenet_mean.binaryproto"
  }
  include: { phase: TRAIN }
}
layer {
  name: "target_data"
  type: "ImageData"
  top: "target_data"
  top: "target_label"
  image_data_param {
    source: "./data/office/webcam_list.txt"
    batch_size: 64
    new_height: 256
    new_width: 256
    shuffle: true
  }
  transform_param {
    crop_size: 227
    mirror: true
    mean_file: "./data/ilsvrc12/imagenet_mean.binaryproto"
  }
  include: { phase: TRAIN }
}
layer {
  name: "target_label_silence"
  type: "Silence"
  bottom: "target_label"
  include: { phase: TRAIN }
}
layer {
  name: "test_data"
  type: "ImageData"
  top: "data"
  top: "label"
  image_data_param {
    source: "./data/office/webcam_list.txt"
    batch_size: 1
    new_height: 256
    new_width: 256
    shuffle: false
  }
  transform_param {
    crop_size: 227
    mirror: false
    mean_file: "./data/ilsvrc12/imagenet_mean.binaryproto"
  }
  include: { phase: TEST }
}
layer {
  name: "data"
  type: "Concat"
  bottom: "source_data"
  bottom: "target_data"
  top: "data"
  concat_param: {
    axis: 0
  }
  include: { phase: TRAIN }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv5_slice"
  type: "Slice"
  bottom: "pool5"
  top: "source_conv5"
  top: "target_conv5"
  slice_param {
    axis: 0
    slice_point: 64
  }
  include: { phase: TRAIN }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "source_conv5"
  top: "fc6"
  param {
    name: "fc6_w"
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
  include: { phase: TRAIN }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
  include: { phase: TRAIN }
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
  include: { phase: TRAIN }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  # Note that blobs_lr can be set to 0 to disable any fine-tuning of this, and any other, layer
  param {
    name: "fc7_w"
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    name: "fc7_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
  include: { phase: TRAIN }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
  include: { phase: TRAIN }
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
  include: { phase: TRAIN }
}
layer {
  name: "fc8_source"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8_source"
  # blobs_lr is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    name: "fc8_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc8_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 31
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include: { phase: TRAIN }
}
layer {
  name: "softmax_loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8_source"
  bottom: "source_label"
  top: "softmax_loss"
  include: { phase: TRAIN }
}
layer {
  name: "fc6_target"
  type: "InnerProduct"
  bottom: "target_conv5"
  top: "fc6_target"
  param {
    name: "fc6_w"
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
  include: { phase: TRAIN }
}
layer {
  name: "fc6_target"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6_target"
  param {
    name: "fc6_w"
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
  include: { phase: TEST }
}
layer {
  name: "relu6_target"
  type: "ReLU"
  bottom: "fc6_target"
  top: "fc6_target"
}
layer {
  name: "drop6_target"
  type: "Dropout"
  bottom: "fc6_target"
  top: "fc6_target"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_target"
  type: "InnerProduct"
  bottom: "fc6_target"
  top: "fc7_target"
  # Note that blobs_lr can be set to 0 to disable any fine-tuning of this, and any other, layer
  param {
    name: "fc7_w"
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    name: "fc7_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7_target"
  type: "ReLU"
  bottom: "fc7_target"
  top: "fc7_target"
}
layer {
  name: "drop7_target"
  type: "Dropout"
  bottom: "fc7_target"
  top: "fc7_target"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_target"
  type: "InnerProduct"
  bottom: "fc7_target"
  top: "fc8_target"
  # blobs_lr is set to higher than for other layers, because this layer is starting from random while the others are already trained
  param {
    name: "fc8_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc8_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 31
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "target_softmax"
  type: "Softmax"
  bottom: "fc8_target"
  top: "target_softmax"
  include: { phase: TRAIN }
}
layer {
  name: "source_softmax"
  type: "Softmax"
  bottom: "fc8_source"
  top: "source_softmax"
  include: { phase: TRAIN }
}
layer {
  name: "concat_fc7"
  type: "Concat"
  bottom: "fc7"
  bottom: "fc7_target"
  top: "fc7_grl"
  concat_param {
    axis: 0
  }
  include: { phase: TRAIN }
}
# ========== adversarial ========== #
#layer {
#  name: "fc7_grl"
#  type: "GradientScaler"
#  bottom: "fc7_grl"
#  top: "fc7_reverse"
#  gradient_scaler_param {
#    lower_bound: 0.0
#    upper_bound: 1.0
#    alpha: 10.0
#    max_iter: 1
#  }
#  include: { phase: TRAIN }
#}
#layer {
#  name: "fc7_adversarial"
#  type: "InnerProduct"
#  bottom: "fc7_reverse"
#  top: "fc7_transform"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 2
#    decay_mult: 0
#  }
#  inner_product_param {
#    num_output: 4096
#    weight_filler {
#      type: "identity"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }  
#  include: { phase: TRAIN }
#}
layer {
  name: "fc7_slice"
  type: "Slice"
  bottom: "fc7_grl"
  top: "source_fc7_1"
  top: "target_fc7_1"
  slice_param {
    axis: 0
  }
  include: { phase: TRAIN }
}
layer {
  name: "fc8_mmd_loss"
  type: "JMMDLoss"
  bottom: "source_fc7_1"
  bottom: "target_fc7_1"
  bottom: "source_softmax"
  bottom: "target_softmax"
  bottom: "source_label"
  #bottom: "fc6"
  #bottom: "fc6_target"
  loss_weight: 0.3 #best -0.3 if use adversarial; best 0.3 if not use adversarial
  top: "fc7_mmd_loss"
  loss_weight: 0.3 #best 0.3
  top: "label_mmd_loss"
  jmmd_param {
    kernel_num: 5
    kernel_mul: 2.0
    label_kernel_num: 1
    label_kernel_mul: 2.0
    fix_gamma: false
    sigma: 1.3 #best
    auto_sigma: false
    label_kernel_mode: PROB_RBF
    label_back_propagate: true
  }
  include: { phase: TRAIN }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8_target"
  bottom: "label"
  top: "accuracy"
  include: { phase: TEST }
}
